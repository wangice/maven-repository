<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.ice</groupId>
    <artifactId>ice-netty-framework</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>
    <modules>
        <module>remoting</module>
        <module>netty-test-client</module>
        <module>netty-test</module>
    </modules>

    <properties>
        <java.version>1.8</java.version>
        <!-- 此处配置的名称要和maven配置文件对应的serverId一致 -->
        <github.global.server>github</github.global.server>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <netty.version>4.1.104.Final</netty.version>
    </properties>

    <parent>
        <groupId>com.ice.framework</groupId>
        <artifactId>ice-framework-parent</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>io.netty</groupId>
                <artifactId>netty-all</artifactId>
                <version>${netty.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <repositories>
        <repository>
            <id>maven-repo-master</id>
            <url>https://raw.github.com/wangice/maven-repository/ice-framework-parent/</url>
            <snapshots>
                <enabled>true</enabled>
                <updatePolicy>always</updatePolicy>
            </snapshots>
        </repository>
    </repositories>

    <build>
        <plugins>
            <!--该插件识别java代码 否则自己在Project Structure设置-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.7.0</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>3.1.1</version>
            </plugin>
            <!-- 要将源码放上去，需要加入这个插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.0.0</version>
                <configuration>
                    <attach>true</attach>
                </configuration>
                <executions>
                    <execution>
                        <phase>compile</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!--参考  https://www.jianshu.com/p/98a141701cc7-->
            <!--Error creating blob: Git Repository is empty. (409)   仓库里随便创建下文件-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>2.8.1</version>
                <configuration>
                    <!-- 配置本地打包后的本地仓库存储地址，后续上传jar包会从此仓库中去取 -->
                    <altDeploymentRepository>internal.repo::default::file://${project.build.directory}/maven-repository</altDeploymentRepository>
                </configuration>
            </plugin>


            <plugin>
                <groupId>com.github.github</groupId>
                <artifactId>site-maven-plugin</artifactId>
                <version>0.12</version>
                <configuration>
                    <message>Maven artifacts for ${project.version}</message>
                    <noJekyll>true</noJekyll>
                    <!-- 指定从哪里去取打好的包，并上传至github -->
                    <outputDirectory>${project.build.directory}/maven-repository</outputDirectory><!--本地jar地址-->
                    <!--
                                指定要上传的分支, refs/heads 这个不变，后面的分支名可选，可以采取一个jar包使用一个分支的策略。
                                若多个jar包同时发布在同一个分支的话，会覆盖。。。。
                                  -->
                    <branch>refs/heads/ice-netty-framework</branch><!--分支-->
                    <merge>true</merge>
                    <includes>
                        <!-- 包含outputDirectory标签内填的文件夹中的所有内容 -->
                        <include>**/*</include>
                    </includes>
                    <!-- github远程存储outputDirectory标签内填的文件夹中的内容 -->
                    <repositoryName>maven-repository</repositoryName><!--对应github上创建的仓库名称 name-->
                    <!--
                            github的用户名，注意不是登录的用户名，此项需要登录后，进入https://github.com/settings/profile页面配置Name属性，
                            否则会报
                            [ERROR] Failed to execute goal com.github.github:site-maven-plugin:0.12:site
                            (default) on project rfcore: Error creating commit: Invalid request.
                            [ERROR] For 'properties/name', nil is not a string.
                            [ERROR] For 'properties/name', nil is not a string. (422)
                            [ERROR] -> [Help 1]
                            的错误
                          -->
                    <repositoryOwner>wangice</repositoryOwner><!--github 仓库所有者-->
                    <server>github</server>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>site</goal>
                        </goals>
                        <phase>deploy</phase>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>